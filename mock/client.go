// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_gochatwork is a generated GoMock package.
package mock_gochatwork

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHttp is a mock of Http interface
type MockHttp struct {
	ctrl     *gomock.Controller
	recorder *MockHttpMockRecorder
}

// MockHttpMockRecorder is the mock recorder for MockHttp
type MockHttpMockRecorder struct {
	mock *MockHttp
}

// NewMockHttp creates a new mock instance
func NewMockHttp(ctrl *gomock.Controller) *MockHttp {
	mock := &MockHttp{ctrl: ctrl}
	mock.recorder = &MockHttpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttp) EXPECT() *MockHttpMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockHttp) Get(endpoint string, params map[string]string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", endpoint, params)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockHttpMockRecorder) Get(endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttp)(nil).Get), endpoint, params)
}

// Post mocks base method
func (m *MockHttp) Post(endpoint string, params map[string]string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", endpoint, params)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Post indicates an expected call of Post
func (mr *MockHttpMockRecorder) Post(endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHttp)(nil).Post), endpoint, params)
}

// Put mocks base method
func (m *MockHttp) Put(endpoint string, params map[string]string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", endpoint, params)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockHttpMockRecorder) Put(endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHttp)(nil).Put), endpoint, params)
}

// Delete mocks base method
func (m *MockHttp) Delete(endpoint string, params map[string]string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", endpoint, params)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockHttpMockRecorder) Delete(endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHttp)(nil).Delete), endpoint, params)
}
